// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/dict.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SayDict_SayDict_FullMethodName = "/SayDict/SayDict"
)

// SayDictClient is the client API for SayDict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayDictClient interface {
	SayDict(ctx context.Context, in *DictRequest, opts ...grpc.CallOption) (*DictResponse, error)
}

type sayDictClient struct {
	cc grpc.ClientConnInterface
}

func NewSayDictClient(cc grpc.ClientConnInterface) SayDictClient {
	return &sayDictClient{cc}
}

func (c *sayDictClient) SayDict(ctx context.Context, in *DictRequest, opts ...grpc.CallOption) (*DictResponse, error) {
	out := new(DictResponse)
	err := c.cc.Invoke(ctx, SayDict_SayDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayDictServer is the server API for SayDict service.
// All implementations must embed UnimplementedSayDictServer
// for forward compatibility
type SayDictServer interface {
	SayDict(context.Context, *DictRequest) (*DictResponse, error)
	mustEmbedUnimplementedSayDictServer()
}

// UnimplementedSayDictServer must be embedded to have forward compatible implementations.
type UnimplementedSayDictServer struct {
}

func (UnimplementedSayDictServer) SayDict(context.Context, *DictRequest) (*DictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayDict not implemented")
}
func (UnimplementedSayDictServer) mustEmbedUnimplementedSayDictServer() {}

// UnsafeSayDictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayDictServer will
// result in compilation errors.
type UnsafeSayDictServer interface {
	mustEmbedUnimplementedSayDictServer()
}

func RegisterSayDictServer(s grpc.ServiceRegistrar, srv SayDictServer) {
	s.RegisterService(&SayDict_ServiceDesc, srv)
}

func _SayDict_SayDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayDictServer).SayDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayDict_SayDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayDictServer).SayDict(ctx, req.(*DictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayDict_ServiceDesc is the grpc.ServiceDesc for SayDict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayDict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayDict",
	HandlerType: (*SayDictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayDict",
			Handler:    _SayDict_SayDict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dict.proto",
}
